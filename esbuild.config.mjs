import path from 'path'
import esbuild from 'esbuild'
import process from 'process'
import builtins from 'builtin-modules'
import inlineWorkerPlugin from "esbuild-plugin-inline-worker";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const prod = process.argv[2] === 'production'

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['src/main.ts'],
	bundle: true,
	plugins: [inlineWorkerPlugin({
		define: {
			'process': '{}', // 继承主配置
		},
	})],
	external: [
		'fs',
		'obsidian',
		'electron',
		'path',
		'moment',
		'node:events',
		'child_process',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		'@lexical/clipboard/clipboard',
		...builtins,
	],
	format: 'cjs',
	define: {
		'import.meta.url': 'import_meta_url',
		process: '{}',
		'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development'),
	},
	inject: [path.resolve('import-meta-url-shim.js')],
	target: 'es2020',
	logLevel: 'info', // 'debug' for more detailed output
	logOverride: {
		'import-is-undefined': 'silent', // 忽略 import-is-undefined 警告
	},
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'D:/Git/Note/note_obsidian/.obsidian/plugins/obsidian-infio-copilot/main.js',
	minify: prod,
})

if (prod) {
	await context.rebuild()
	process.exit(0)
} else {
	await context.watch()
}
